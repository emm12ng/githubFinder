{"ast":null,"code":"import axios from 'axios';\nconst GITHUB_URL = process.env.REACT_APP_GITHUB_URL;\nconst github = axios.create({\n  baseURL: GITHUB_URL\n});\nexport const searchUsers = async text => {\n  const params = new URLSearchParams({\n    q: text\n  });\n  const response = await github.get(`search/users?${params}`);\n  return response.data.items;\n};\nexport const getUserAndRepos = async login => {\n  const [user, repos] = await Promise.all([github.get(`/users/${login}`), github.get(`/users/${login}/repos`)]);\n  return {\n    user: user.data,\n    repos: repos.data\n  };\n};\nexport const getUser = async login => {\n  const response = await fetch(`${GITHUB_URL}/users/${login}`, {});\n\n  if (response.status === 404) {\n    window.location = '/notfound';\n  } else {\n    const data = await response.json();\n    return data;\n  }\n};\nexport const getUserRepos = async login => {\n  const params = new URLSearchParams({\n    sort: 'created',\n    per_page: 10\n  });\n  const response = await fetch(`${GITHUB_URL}/users/${login}/repos?params`, {});\n  const data = await response.json();\n  return data;\n};","map":{"version":3,"names":["axios","GITHUB_URL","process","env","REACT_APP_GITHUB_URL","github","create","baseURL","searchUsers","text","params","URLSearchParams","q","response","get","data","items","getUserAndRepos","login","user","repos","Promise","all","getUser","fetch","status","window","location","json","getUserRepos","sort","per_page"],"sources":["/home/emma/githubFinder/src/context/github/GithubActions.js"],"sourcesContent":["import axios from 'axios'\n\nconst GITHUB_URL = process.env.REACT_APP_GITHUB_URL\n\nconst github = axios.create({\n    baseURL: GITHUB_URL,\n})\n\nexport const searchUsers = async (text) => {\n\n    const params = new URLSearchParams({\n        q: text\n    })\n\n    const response = await github.get(`search/users?${params}`)\n    return response.data.items\n}\n\nexport const getUserAndRepos = async (login) => {\n    const [user, repos] = await Promise.all([\n        github.get(`/users/${login}`),\n        github.get(`/users/${login}/repos`)\n    ])\n    return { user: user.data, repos: repos.data }\n}\n\nexport const getUser = async (login) => {\n\n    const response = await fetch(`${GITHUB_URL}/users/${login}`, {})\n\n    if (response.status===404) {\n        window.location = '/notfound'\n    } \n    else {\n        const data = await response.json()\n\n        return data\n    }\n}\n\nexport const getUserRepos = async (login) => {\n\n    const params = new URLSearchParams({\n        sort: 'created',\n        per_page: 10\n    })\n\n    const response = await fetch(`${GITHUB_URL}/users/${login}/repos?params`, {})\n\n    const data = await response.json()\n\n    return data\n}"],"mappings":"AAAA,OAAOA,KAAP,MAAkB,OAAlB;AAEA,MAAMC,UAAU,GAAGC,OAAO,CAACC,GAAR,CAAYC,oBAA/B;AAEA,MAAMC,MAAM,GAAGL,KAAK,CAACM,MAAN,CAAa;EACxBC,OAAO,EAAEN;AADe,CAAb,CAAf;AAIA,OAAO,MAAMO,WAAW,GAAG,MAAOC,IAAP,IAAgB;EAEvC,MAAMC,MAAM,GAAG,IAAIC,eAAJ,CAAoB;IAC/BC,CAAC,EAAEH;EAD4B,CAApB,CAAf;EAIA,MAAMI,QAAQ,GAAG,MAAMR,MAAM,CAACS,GAAP,CAAY,gBAAeJ,MAAO,EAAlC,CAAvB;EACA,OAAOG,QAAQ,CAACE,IAAT,CAAcC,KAArB;AACH,CARM;AAUP,OAAO,MAAMC,eAAe,GAAG,MAAOC,KAAP,IAAiB;EAC5C,MAAM,CAACC,IAAD,EAAOC,KAAP,IAAgB,MAAMC,OAAO,CAACC,GAAR,CAAY,CACpCjB,MAAM,CAACS,GAAP,CAAY,UAASI,KAAM,EAA3B,CADoC,EAEpCb,MAAM,CAACS,GAAP,CAAY,UAASI,KAAM,QAA3B,CAFoC,CAAZ,CAA5B;EAIA,OAAO;IAAEC,IAAI,EAAEA,IAAI,CAACJ,IAAb;IAAmBK,KAAK,EAAEA,KAAK,CAACL;EAAhC,CAAP;AACH,CANM;AAQP,OAAO,MAAMQ,OAAO,GAAG,MAAOL,KAAP,IAAiB;EAEpC,MAAML,QAAQ,GAAG,MAAMW,KAAK,CAAE,GAAEvB,UAAW,UAASiB,KAAM,EAA9B,EAAiC,EAAjC,CAA5B;;EAEA,IAAIL,QAAQ,CAACY,MAAT,KAAkB,GAAtB,EAA2B;IACvBC,MAAM,CAACC,QAAP,GAAkB,WAAlB;EACH,CAFD,MAGK;IACD,MAAMZ,IAAI,GAAG,MAAMF,QAAQ,CAACe,IAAT,EAAnB;IAEA,OAAOb,IAAP;EACH;AACJ,CAZM;AAcP,OAAO,MAAMc,YAAY,GAAG,MAAOX,KAAP,IAAiB;EAEzC,MAAMR,MAAM,GAAG,IAAIC,eAAJ,CAAoB;IAC/BmB,IAAI,EAAE,SADyB;IAE/BC,QAAQ,EAAE;EAFqB,CAApB,CAAf;EAKA,MAAMlB,QAAQ,GAAG,MAAMW,KAAK,CAAE,GAAEvB,UAAW,UAASiB,KAAM,eAA9B,EAA8C,EAA9C,CAA5B;EAEA,MAAMH,IAAI,GAAG,MAAMF,QAAQ,CAACe,IAAT,EAAnB;EAEA,OAAOb,IAAP;AACH,CAZM"},"metadata":{},"sourceType":"module"}